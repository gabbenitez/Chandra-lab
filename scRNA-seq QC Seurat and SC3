##################################################

#         SC-RNA QC SCRIP SCATER / SEURAT        #

##################################################

# ADAPTED FROM DANIEL SIMPSON AND NEIL ROBERTSON #

##################################################



require("Matrix")
require("SingleCellExperiment")
require("scater")



setwd("/mnt/tchandra-lab/Gab/data/scRNA-seq/Chandra_Etoposide_3CellLines/aggregate/outs/filtered_feature_bc_matrix")

barcodes <- read.table("barcodes.tsv.gz") 
genenames <- read.table("/mnt/tchandra-lab/Gab/data/scRNA-seq/Chandra_Etoposide_3CellLines/aggregate/outs/filtered_feature_bc_matrix/features.tsv.gz", sep = "\t") ###load up genes.tsv
moles <- Matrix::readMM("matrix.mtx.gz") ###load up matrix.mtx



rownames(moles) <- make.unique(as.character(genenames[,2]))

####if second column is genenames then we want this one, and also uniquing any duplicates, which is essentially adding .1 or .2 to duplicates
colnames(moles) <- barcodes[,1]



codes = as.character(barcodes[,1])
sample.ID = vector()
sample.seq = vector()
for (i in 1: length(codes)){
  all = unlist(strsplit(codes[i], "[-]"))
  sample.ID[i] = all[2]
  sample.seq[i] =all[1]
}


new.sample.IDs= replace(sample.ID, sample.ID=="1", "Control")
new.sample.IDs=replace(new.sample.IDs, new.sample.IDs=="2", "Etoposide")
new.sample.IDs=replace(new.sample.IDs, new.sample.IDs=="3", "Quiescent")


####change names rows#####

sample.ID[sample.ID == "1"] <- "Control"
sample.ID[sample.ID == "2"] <- "Etoposide"
sample.ID[sample.ID == "3"] <- "Quiescent"

table(sample.ID)

#sample.ID


anno <- data.frame(Tissue=rep("Fibroblasts", times=ncol(moles)), SampleIDs = new.sample.IDs )
rownames(anno) <- colnames(moles)
dim(moles)


moles <- as.matrix(moles)
SCE.sce <- SingleCellExperiment(assays = list(counts = moles), colData = anno)
SCE.sce



######### SAVE OBJECT ############

setwd("/mnt/tchandra-lab/Gab/data/scRNA-seq/Chandra_Etoposide_3CellLines/analysis/Summer_2020")

project_filename_prefix <- "Etopo_Sen"


####Data is now saved as a matrix



####################################

######### Normalisation ############

####################################



######### LOG NORM ############

logcounts(SCE.sce) <- log2(as.matrix(counts(SCE.sce))+1)
logNormCounts(SCE.sce, log = TRUE)



######### CPM NORM ############

cpm(SCE.sce) <- log2(calculateCPM(SCE.sce) + 1)



####################################

######### Quality Control ##########

####################################



### RM ZERO READ GENES ###, has removed the genes not expressed in any cell


keep_feature <- rowSums(counts(SCE.sce) > 0) > 0
SCE.sce.keep <- SCE.sce[keep_feature, ]
dim(SCE.sce.keep)


#### the dimensions are the features and cells


### MEASURE ERCC/ARTEFACTS ###
isSpike(SCE.sce.keep, "MT") <- grepl("^MT-", rownames(SCE.sce.keep))
#isSpike(SCE.sce.keep, "ERCC") <- grepl("^ERCC", rownames(SCE.sce.keep)) ####this QC isnt required in 10x

SCE.sce.keep <- calculateQCMetrics(
  SCE.sce.keep,
  feature_controls = list(
    MT = isSpike(SCE.sce.keep, "MT")
  )
)
dim(SCE.sce.keep)


### Just ERCC not done due to redundancy with 10x data

###################################################################


#############COUNTS VS. FEATURES #############



png(paste(project_filename_prefix, "SCE_log10Counts_vs_features_by_Plate.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)
plotColData(SCE.sce.keep, x= "log10_total_counts", y = "total_features_by_counts",
            colour = "SampleIDs", size_by = "pct_counts_ERCC")
dev.off()



png(paste(project_filename_prefix, "SCE_log10Counts_vs_pctMito_by_Plate_sizefeat.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)
plotColData(SCE.sce.keep, x = "log10_total_counts", y = "pct_counts_MT", colour = "SampleIDs", size = "total_features_by_counts")
dev.off()





### VIEW ANNOTATION ###

View(as.data.frame(SCE.sce.keep@colData))


#########################################

############## QC HISTOGRAMS ############

#########################################



png(paste(project_filename_prefix, "SCE_histo_total_reads_preQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500) 
hist(
  SCE.sce.keep$total_counts,
  breaks = 100,
  main = "Total Reads Histogram",
  xlab = "Total Reads",
  ylab = "Number of Cells"
)
abline(v = 10^6, col = "red")
dev.off()



png(paste(project_filename_prefix, "SCE_histo_log10total_reads_preQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500) 
hist(
  SCE.sce.keep$log10_total_counts,
  breaks = 100,
  main = "Total Reads Histogram",
  xlab = "Total Reads",
  ylab = "Number of Cells"
)
abline(v = 5, col = "red")
dev.off()







png(paste(project_filename_prefix, "SCE_total_features_by_counts_hist.png", sep = ""), width = 6, height = 5, units = 'in', res = 600)
hist(
  SCE.sce.keep$total_features_by_counts,
  breaks = 50,
  main = "Total Features Histogram",
  xlab = "Total Features",
  ylab = "Number of Cells"
)
abline(v = 4000, col = "red")
dev.off()



#########################################

############## SCATER PLOTS #############

#########################################



###Can take a long time to load depending on dataset. With 10x theres so many cells dont even bloody bother

png(paste(project_filename_prefix, "SCE_QCplot.png", sep = ""), width = 4, height = 4, units = 'in', res = 300)
plotHighestExprs(SCE.sce.keep)
dev.off()



png(paste(project_filename_prefix, "SCE_QC_expsvsMean.png", sep = ""), width = 8, height = 6, units = 'in', res = 400)
plotExprsFreqVsMean(SCE.sce.keep)
dev.off()



png(paste(project_filename_prefix, "SCE_QC_scaterplot.png", sep = ""), width = 8, height = 6, units = 'in', res = 400)
par(mfrow=c(1,2)) #, mar=c(5.1, 4.1, 0.1, 0.1))
plotScater(SCE.sce.keep, colour_by = "Tissue")
plotScater(SCE.sce.keep, colour_by = "SampleIDs")
dev.off()




#########################################

########### FILTER CRITERIA #############

#########################################




filter_by_total_counts <- SCE.sce.keep$total_counts >= 1700
#filter_by_top_total_counts <- SCE.sce.keep$log10_total_counts <= 3.7
filter_by_expr_features <- SCE.sce.keep$total_features_by_counts >= 750
filter_by_MT <- SCE.sce.keep$pct_counts_MT < 17

### can create other filter measures too
#filter_by_EGFP <- SCE.sce.keep$pct_counts_feature_controls_EGFP > 0     unused

##Setting up keep features
SCE.sce.keep$use <- (
  ### RM LOW FEATURES ###
  filter_by_expr_features &
    ### RM LOW COUNTS ###
    filter_by_total_counts &
    ### RM MT ###
    filter_by_MT 
    ### RM TOP END ###
#    filter_by_top_total_counts
)


######### FILTER UNWANTED CELLS ###########



SCE.sce.keep.filt <- SCE.sce.keep

drop <- (!SCE.sce.keep$use) ##the ! here swaps trues with falses

SCE.sce.keep.filt <- SCE.sce.keep.filt[,!drop]



endog_genes <- !rowData(SCE.sce.keep.filt)$is_feature_control



dim(SCE.sce.keep)
#17652  4016
dim(SCE.sce.keep.filt)
#17652  1721


table(SCE.sce.keep$SampleIDs)
Control Etoposide Quiescent 
1594       969      1453 

table(SCE.sce.keep.filt$SampleIDs)
Control Etoposide Quiescent 
759       354       608 



#######################################

#########################################

########### POST QC PLOTS ###############

#########################################



png(paste(project_filename_prefix, "SCE_log10Counts_vs_features_by_Plate_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

plotColData(SCE.sce.keep.filt, x = "log10_total_counts", y = "total_features_by_counts",
            
            colour = "SampleIDs")

dev.off()





png(paste(project_filename_prefix, "SCE_log10Counts_vs_pctMito_by_Plate_sizefeat_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

plotColData(SCE.sce.keep.filt, x = "log10_total_counts", y = "pct_counts_MT", colour = "SampleIDs", size = "total_features_by_counts")

dev.off()



png(paste(project_filename_prefix, "SCE_log10Counts_vs_pctERCC_by_Plate_sizefeat_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

plotColData(SCE.sce.keep.filt, x = "log10_total_counts", y = "pct_counts_ERCC", colour = "SampleIDs", size = "total_features_by_counts")

dev.off()


#### no ERCC as 10x ####




#########################################

############### PCAs ####################

#########################################


png(paste(project_filename_prefix, "SCE_PCA__endog_genes_preQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

PCA.SCE.sce.keep.endog_genes<- runPCA(SCE.sce.keep[endog_genes, ])
plotPCA(PCA.SCE.sce.keep.endog_genes,

        colour_by="SampleIDs",
        size_by = "total_features_by_counts",
        shape_by = "Tissue")

dev.off()




###post QC
png(paste(project_filename_prefix, "SCE_PCA__endog_genes_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

PCA.SCE.sce.keep.filt.endog_genes<- runPCA(SCE.sce.keep.filt[endog_genes, ])
plotPCA(PCA.SCE.sce.keep.filt.endog_genes,
        colour_by="SampleIDs",
        size_by = "total_features_by_counts",
        shape_by = "Tissue")
dev.off()


###############################################################

runPCA(SCE.sce.keep[endog_genes, ])

class: SingleCellExperiment 
dim: 17639 4016 
metadata(0):
  assays(3): counts logcounts cpm
rownames(17639): AL669831.5 FAM87B ... AC004556.1 AC240274.1
rowData names(8): is_feature_control is_feature_control_MT ... total_counts log10_total_counts
colnames(4016): AAACCTGAGTTTAGGA-1 AAACCTGCAGGTCTCG-1 ... TTTGTCAGTAGAAAGG-3 TTTGTCAGTCGTGGCT-3
colData names(39): Tissue SampleIDs ... pct_counts_in_top_500_features_MT use
reducedDimNames(1): PCA
spikeNames(1): MT
altExpNames(0): 
  
  
  
runPCA(SCE.sce.keep.filt[endog_genes, ])

class: SingleCellExperiment 
dim: 17639 3423 
metadata(0):
  assays(3): counts logcounts cpm
rownames(17639): AL669831.5 FAM87B ... AC004556.1 AC240274.1
rowData names(8): is_feature_control is_feature_control_MT ... total_counts log10_total_counts
colnames(3423): AAACCTGAGTTTAGGA-1 AAACCTGCAGGTCTCG-1 ... TTTGTCAGTAGAAAGG-3 TTTGTCAGTCGTGGCT-3
colData names(39): Tissue SampleIDs ... pct_counts_in_top_500_features_MT use
reducedDimNames(1): PCA
spikeNames(1): MT
altExpNames(0):  
  
#########################################



#########################################

############### TSNE ####################

#########################################






png(paste(project_filename_prefix, "SCE_TSNE_counts_endog_genes_preQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)
SCE.sce.keep[endog_genes,] <- runTSNE(SCE.sce.keep[endog_genes,])
plotTSNE(a,
         colour_by="SampleIDs",
         size_by = "total_features_by_counts",
         shape_by = "Tissue")
dev.off()



png(paste(project_filename_prefix, "SCE_TSNE_endog_counts_genes_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)
SCE.sce.keep.filt[endog_genes,] <- runTSNE(SCE.sce.keep.filt[endog_genes,])
plotTSNE(b,
         colour_by="SampleIDs",
         size_by = "total_features_by_counts",
         shape_by = "Tissue")
dev.off()



### HIGHEST EXPRESSING GENES ###
png(paste(project_filename_prefix, "SCE_QCplot_highestExpressing_postQC.png", sep = ""), width = 4, height = 4, units = 'in', res = 300)
plotHighestExprs(SCE.sce.keep.filt)
dev.off()






#########################################

############## Seurat ###################

#########################################



library("SingleCellExperiment")

library("Seurat")

library("mclust")

library("dplyr")

library("rgl")




sce.seurat.filt <- CreateSeuratObject(counts = counts(SCE.sce.keep.filt), 
                                      meta.data = as.data.frame(colData(SCE.sce.keep.filt)),
                              project = "SCE")

sce.seurat.filt[["percent.mt"]] <- PercentageFeatureSet(sce.seurat.filt, pattern = "^MT-")



png(paste(project_filename_prefix, "Seruat_featureCounts_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)
VlnPlot(sce.seurat.filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
dev.off()



png(paste(project_filename_prefix, "Seruat_featureCounts_mtScatter_postQC.png", sep = ""), width = 12, height = 5, units = 'in', res = 500)
plot1 <- FeatureScatter(sce.seurat.filt, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sce.seurat.filt, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
dev.off()



sce.seurat.filt <- NormalizeData(sce.seurat.filt, normalization.method = "LogNormalize", scale.factor = 10000)



sce.seurat.filt <- FindVariableFeatures(sce.seurat.filt, selection.method = "vst", nfeatures = 500)

top20 <- head(VariableFeatures(sce.seurat.filt), 20)



png(paste(project_filename_prefix, "Seruat_featureCounts_mostVariableGenes_postQC.png", sep = ""), width = 8, height = 5, units = 'in', res = 500)

plot1 <- VariableFeaturePlot(sce.seurat.filt)

plot2 <- LabelPoints(plot = plot1, points = top20, repel = TRUE)

plot2

dev.off()





####### SCALE SEURAT DATA ########

all.genes <- rownames(sce.seurat.filt)

sce.seurat.filt <- ScaleData(sce.seurat.filt, features = all.genes)







sce.seurat.filt <- RunPCA(sce.seurat.filt, features = VariableFeatures(object = sce.seurat.filt))



png(paste(project_filename_prefix, "Seruat_featuresPCA_dim12_postQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500)

PCAPlot(object = sce.seurat.filt, dim.1 = 1, dim.2 = 2, colors.use=sce.seurat.filt@meta.data$SampleIDs)

dev.off()



png(paste(project_filename_prefix, "Seruat_featuresPCAHeatmap_dim12_postQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500)

DimHeatmap(sce.seurat.filt, dims = 1, cells = 500, balanced = TRUE)

dev.off()



png(paste(project_filename_prefix, "Seruat_featuresPCAHeatmap_multiDim_postQC.png", sep = ""), width = 10, height = 12, units = 'in', res = 300)

DimHeatmap(sce.seurat.filt, dims = 1:10, cells = 500, balanced = TRUE)

dev.off()











# NOTE: This process can take a long time for big datasets, comment out for expediency. More

# approximate techniques such as those implemented in ElbowPlot() can be used to reduce

# computation time

sce.seurat.filt <- JackStraw(sce.seurat.filt, num.replicate = 100)

sce.seurat.filt <- ScoreJackStraw(sce.seurat.filt, dims = 1:20)



png(paste(project_filename_prefix, "Seruat_jackStrawPlot_dim1-20_postQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500)

JackStrawPlot(sce.seurat.filt, dims = 1:20)

dev.off()



png(paste(project_filename_prefix, "Seruat_jackStraw_ElbowPlot_postQC.png", sep = ""), width = 6, height = 5, units = 'in', res = 500)

ElbowPlot(sce.seurat.filt)

dev.off()





####### CHANGE TO INFLECTION POINT OF ELBOW PLOT ########

NUM_PRINCOMP_TO_USE = 15



sce.seurat.filt <- FindNeighbors(object = sce.seurat.filt,
                                 
                                 reduction = "pca",
                                 
                                 dims = 1:NUM_PRINCOMP_TO_USE,
                                 
                                 compute.SNN = TRUE,
                                 
                                 verbose = TRUE,
                                 
                                 k.param = 20)





sce.seurat.filt <- FindClusters(object = sce.seurat.filt,
                                
                                dims.use = 1:NUM_PRINCOMP_TO_USE,
                                
                                resolution = 1.0,
                                
                                print.output = 0,
                                
                                save.SNN = TRUE)





sce.seurat.filt <- RunTSNE(object = sce.seurat.filt,
                           
                           dims.use = 1:NUM_PRINCOMP_TO_USE,
                           
                           do.fast = TRUE,
                           
                           seed.use = 1,
                           
                           tsne.method = "Rtsne",
                           
                           dim.embed = 3)



sce.seurat.filt <- RunUMAP(sce.seurat.filt,
                           
                           dims = 1:NUM_PRINCOMP_TO_USE,
                           
                           #n.components = 3L,
                           
                           reduction = 'pca')



library(rgl)

gg_color_hue <- function(n) {
  
  hues = seq(15, 375, length = n + 1)
  
  hcl(h = hues, l = 65, c = 100)[1:n]
  
}





n = 4

cols = gg_color_hue(n)


####Ignoring 3D Umap for now ################


clusters <- 10

cols <- rainbow(clusters)[as.factor(sce.seurat.filt$seurat_clusters)]

plot3d(sce.seurat.filt@reductions$tsne@cell.embeddings,
       
       xlab="tSNE_1",ylab="tSNE_2",zlab="tSNE_3",
       
       type="s", size=0.5,
       
       col=cols)

legend3d("topright", legend = paste('Cluster', c('1', '2', '3', '4', '5', '6', '7', '8', '9' , '10')), pch = 16, col = rainbow(clusters), cex=1, inset=c(0.02))

grid3d(side="z", at=list(z=0))





replicates <- 4

cols <- rainbow(replicates)[as.factor(sce.seurat.filt$SampleIDs)]

plot3d(sce.seurat.filt@reductions$tsne@cell.embeddings,
       
       xlab="tSNE_1",ylab="tSNE_2",zlab="tSNE_3",
       
       type="s", size=0.5,
       
       col=cols)

legend3d("topright", legend = paste('', c('Control 1', 'Control 2', 'IR 1', 'IR 2')), pch = 16, col = rainbow(replicates), cex=1, inset=c(0.02))

grid3d(side="z", at=list(z=0))





clusters <- 10

cols <- rainbow(clusters)[as.factor(sce.seurat.filt$seurat_clusters)]

plot3d(sce.seurat.filt@reductions$umap@cell.embeddings,
       
       xlab="UMAP_1",ylab="UMAP_2",zlab="UMAP_3",
       
       type="s", size=0.5,
       
       col=cols)

legend3d("topright", legend = paste('Cluster', c('1', '2', '3', '4', '5', '6', '7', '8', '9' , '10')), pch = 16, col = rainbow(clusters), cex=1, inset=c(0.02))

grid3d(side="z", at=list(z=0))



replicates <- 4

cols <- rainbow(replicates)[as.factor(sce.seurat.filt$SampleIDs)]

plot3d(sce.seurat.filt@reductions$umap@cell.embeddings,
       
       xlab="UMAP_1",ylab="UMAP_2",zlab="UMAP_3",
       
       type="s", size=0.5,
       
       col=cols)

legend3d("topright", legend = paste('', c('Control 1', 'Control 2', 'IR 1', 'IR 2')), pch = 16, col = rainbow(replicates), cex=1, inset=c(0.02))

grid3d(side="z", at=list(z=0))


##### Ending ingnorance ############################################

sce.seurat.filt <- RunUMAP(sce.seurat.filt, dims = 1:15, n.components = 2)
Plot1 <- DimPlot(sce.seurat.filt, reduction = "umap")
Plot2 <- DimPlot(sce.seurat.filt, reduction = "umap", group.by = "celltype")
png("Etop_Seur_uMap_celltype.png", width = 13, height = 5, units = 'in', res = 600)
CombinePlots(plots = list(Plot1, Plot2))
dev.off()


Plot1 <- DimPlot(sce.seurat.filt, reduction = "tsne")
Plot2 <- DimPlot(sce.seurat.filt, reduction = "tsne", group.by = "celltype")
png(paste(project_filename_prefix, "Seurat_TSNE_celltype.png", sep = ""), width = 6, height = 5, units = 'in', res = 600)
CombinePlots(plots = list(Plot1, Plot2))
dev.off()





####### FINDING MARKERS #######



markers0 <- FindMarkers(sce.seurat.filt, 0)



png(paste(project_filename_prefix, "Seurat_ProvisionalMarkers.1.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

VlnPlot(object = sce.seurat.filt, features = rownames(markers0)[1:8])

dev.off()



png(paste(project_filename_prefix, "Seurat_FeaturePlot.1.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

FeaturePlot(
  
  sce.seurat.filt,
  
  features = rownames(markers0)[1:8],
  
  reduction = "tsne",
  
  dims = c(1,2),
  
  cols = c("lightgrey", "blue"),
  
  ncol = 3
  
)

dev.off()



png(paste(project_filename_prefix, "Seurat_ProvisionalMarkers.2.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

VlnPlot(object = sce.seurat.filt, features = rownames(markers0)[9:16])

dev.off()



png(paste(project_filename_prefix, "Seurat_FeaturePlot.2.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

FeaturePlot(
  
  sce.seurat.filt,
  
  features = rownames(markers0)[9:16],
  
  reduction = "tsne",
  
  dims = c(1,2),
  
  cols = c("lightgrey", "blue"),
  
  ncol = 3
  
)

dev.off()



png(paste(project_filename_prefix, "Seurat_ProvisionalMarkers.3.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

VlnPlot(object = sce.seurat.filt, features = rownames(markers0)[13:18])

dev.off()



png(paste(project_filename_prefix, "Seurat_FeaturePlot.3.png", sep = ""), width = 11, height = 5, units = 'in', res = 400)

FeaturePlot(
  
  sce.seurat.filt,
  
  features = rownames(markers0)[17:24],
  
  reduction = "tsne",
  
  dims = c(1,2),
  
  cols = c("lightgrey", "blue"),
  
  ncol = 3
  
)

dev.off()





#########################################

########## FINDING ALL MARKERS###########

#########################################



markers <- FindAllMarkers(
  
  object = sce.seurat.filt,
  
  only.pos = TRUE,
  
  min.pct = 0.25,
  
  thresh.use = 0.25
  
)



top10 <- markers %>% group_by(cluster) %>% top_n(10, avg_logFC)





png(paste(project_filename_prefix, "Seurat_AllMarkers_Heatmap.png", sep = ""), width = 10, height = 15, units = 'in', res = 600)

DoHeatmap(
  
  object = sce.seurat.filt,
  
  features = top10$gene,
  
  group.by = "ident",
  
  group.bar = T,
  
  disp.min = -2.5,
  
  disp.max = 2.5,
  
  label = TRUE
  
)

dev.off()



png(paste(project_filename_prefix, "Seurat_AllMarkers_Heatmap.LowResWiki.png", sep = ""), width = 8, height = 12, units = 'in', res = 300)

DoHeatmap(
  
  object = sce.seurat.filt,
  
  features = top10$gene,
  
  group.by = "ident",
  
  group.bar = T,
 
  disp.min = -2.5,
  
  disp.max = 2.5,
  
  label = TRUE
  
)

dev.off()




####### APEND CLUSTERS TO SCATER #######

SCE.sce.keep.filt$Seurat_Clusters <- sce.seurat.filt@meta.data$seurat_clusters



rm(list=ls()[!(ls() %in% c("SCE.sce.keep.filt", "sce.seurat.filt", "markers", "markers0",))])



####10x Cyclone #####################


SCE.genenames.unique <- genenames
SCE.genenames.unique$V2 <- make.unique(as.character(SCE.genenames.unique$V2))


###Changing to ensembl IDs
SCE.sce.keep.filt2 <- SCE.sce.keep.filt

rownames(SCE.sce.keep.filt2) <- SCE.genenames.unique$V1[match(rownames(SCE.sce.keep.filt2), SCE.genenames.unique$V2)]



library(scran)
hh.pairs <- readRDS(system.file("exdata", "human_cycle_markers.rds", package="scran"))
SCE.cyc <- cyclone(SCE.sce.keep.filt2, hh.pairs, gene.names=row.names(SCE.sce.keep.filt2))

png("SCE_cyc_Pie_predPhases.png", width = 6, height = 5, units = 'in', res = 600)
pie(table(SCE.cyc$phases), 
    col = c("firebrick3", "deepskyblue3", "gold", "violet",  "green",  "pink", "cyan"),
    main = "Predicted Cell Phases")
dev.off()

SCE.sce.keep.filt$Cyc_Score <- SCE.cyc$phases

table(SCE.sce.keep.filt$Cyc_Score)
###
#    G1  G2M    S 
#  1342   43  336 
#


SCE.sce.keep.filt$G1_Cyc_Score <- SCE.cyc$scores$G1
SCE.sce.keep.filt$S_Cyc_Score <- SCE.cyc$scores$S
SCE.sce.keep.filt$G2M_Cyc_Score <- SCE.cyc$scores$G2M


SCE.sce.keep.filt.sc3$G1_Cyc_Score <- SCE.cyc$scores$G1
SCE.sce.keep.filt.sc3$S_Cyc_Score <- SCE.cyc$scores$S
SCE.sce.keep.filt.sc3$G2M_Cyc_Score <- SCE.cyc$scores$G2M

####################################################################
###################### SC3 #########################################
####################################################################


#####SC3 is for clustering single cells

library(SC3)

rowData(SCE.sce.keep.filt)$feature_symbol <- rownames(SCE.sce.keep.filt)
#already done
#logcounts(PrjFlk1.sce.keep.filt) <- log2(as.matrix(counts(PrjFlk1.sce.keep.filt))+1)

SCE.sce.keep.filt.sc3 <- sc3(SCE.sce.keep.filt, ks = 2:10, biology = T)

sc3_interactive(SCE.sce.keep.filt.sc3) ###this one isnt really necessary anymore since we can use the looped graphs below




####### SC3 for looping graphs ####################

clus <- c(2:10)

####consens clust
for (i in clus){
  outfile <- paste(i,"clusters_Obj_cons.png",sep="")
  png(outfile, width = 8, height = 6, units = 'in', res = 600)
  sc3_plot_consensus(
    SCE.sce.keep.filt.sc3, k = i, 
    show_pdata = c(
      "SampleIDs", 
      "Seurat_Clusters", 
      "Cyc_Score",
      "log10_total_counts"
    )
  )
  dev.off()
}


#####For DE and Markers, p and Auroc are set low so that we can see as much differences as we can, no matter how subtle

####DE
for (i in clus){
  outfile <- paste(i,"clusters_Obj_DE.png",sep="")
  png(outfile, width = 10, height = 10, units = 'in', res = 600)
  sc3_plot_de_genes(
    SCE.sce.keep.filt.sc3, k = i, p.val = 0.1, 
    show_pdata = c(
      "SampleIDs", 
      "Seurat_Clusters", 
      "Cyc_Score",
      "log10_total_counts"
    )
  )
  dev.off()
}


####sc3 Markers

for (i in clus){
  outfile <- paste(i,"clusters_Obj_Markers.png",sep="")
  png(outfile, width = 10, height = 15, units = 'in', res = 600)
  sc3_plot_markers(
    SCE.sce.keep.filt.sc3, k = i, auroc = 0.6, p.val = 0.1, 
    show_pdata = c(
      "SampleIDs", 
      "Seurat_Clusters", 
      "Cyc_Score",
      "log10_total_counts"
    )
  )
  dev.off()
}

###write out results
sc3_export_results_xls(SCE.sce.keep.filt.sc3)
